document.addEventListener('DOMContentLoaded', async function () {
    const teamId = new URLSearchParams(window.location.search).get('id');

    if (!teamId) {
        console.error('ID –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL');
        return;
    }

    try {
        const response = await fetch(`/api/team/${teamId}`);
        if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥—ã");

        const team = await response.json();

        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        const teamNameSpan = document.getElementById('team-name-text');
        teamNameSpan.textContent = team.team_name;

        const editButton = document.getElementById('edit-team-name-btn');
        attachEditButtonListener();

        function attachEditButtonListener() {
            editButton.addEventListener('click', function () {
                const input = document.createElement('input');
                input.type = 'text';
                input.value = teamNameSpan.textContent;
                input.classList.add('team-name-input');

                teamNameSpan.replaceWith(input);
                input.focus();

                input.addEventListener('blur', () => finishEditing(input));
                input.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter') {
                        finishEditing(input);
                    }
                });

                function finishEditing(inputEl) {
                    const newTeamName = inputEl.value.trim();
                    if (newTeamName === '') {
                        alert('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
                        inputEl.focus();
                        return;
                    }

                    saveTeamDescription(teamId, newTeamName, descriptionTextarea.value, team.emails);

                    const newSpan = document.createElement('span');
                    newSpan.id = 'team-name-text';
                    newSpan.classList.add('team-name');
                    newSpan.textContent = newTeamName;
                    inputEl.replaceWith(newSpan);

                    attachEditButtonListener();
                }
            });
        }

        const descriptionTextarea = document.querySelector('.team-description-container');
        if (descriptionTextarea) {
            descriptionTextarea.value = team.description || '';
            descriptionTextarea.addEventListener('blur', () => saveTeamDescription(teamId, teamNameSpan.textContent, descriptionTextarea.value, team.emails));
        }

        const participantsContainer = document.querySelector('.team-participants');
        const countContainer = document.querySelector('.participants-count');
        if (participantsContainer && countContainer) {
            participantsContainer.innerHTML = '';
            const users = team.emails || [];

            if (users.length === 0) {
                participantsContainer.innerHTML = '<p>–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</p>';
            } else {
                users.forEach(user => {
                    const userLink = document.createElement('a');
                    userLink.href = `/profile?id=${user.id_user}`;
                    userLink.classList.add('participant-item');
                    userLink.textContent = user.email;
                    participantsContainer.appendChild(userLink);
                });
            }

            countContainer.textContent = `–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${users.length}`;
        }

        const photoContainer = document.getElementById('photo-container');
        const teamImageInput = document.getElementById('teamImage');

        function renderUploadButton() {
            photoContainer.innerHTML = `
                <button id="uploadTrigger" class="upload-btn"><img src="/icons/load-photo.svg"></button>
            `;
            document.getElementById('uploadTrigger').addEventListener('click', () => {
                teamImageInput.click();
            });
        }

        function renderTeamImage(imageUrl) {
            photoContainer.innerHTML = '';
            const img = document.createElement('img');
            img.src = imageUrl;
            img.alt = "–§–æ—Ç–æ –∫–æ–º–∞–Ω–¥—ã";
            img.classList.add('team-photo');
            photoContainer.appendChild(img);

            // üÜï –ö–ª–∏–∫ –ø–æ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            img.addEventListener('click', () => {
                teamImageInput.click();
            });
        }

        if (team.teamImgPath != null && team.teamImgPath.trim() !== '') {
            renderTeamImage(team.teamImgPath);
        } else {
            renderUploadButton();
        }

        teamImageInput.addEventListener('change', function () {
            const file = this.files[0];
            if (!file || !teamId) return;

            const formData = new FormData();
            formData.append('image', file);
            formData.append('teamId', teamId);

            fetch('/api/team/upload-image', {
                method: 'POST',
                body: formData
            })
                .then(res => {
                    if (!res.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
                    return res.json();
                })
                .then(data => {
                    renderTeamImage(data.imageUrl);
                })
                .catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', err));
        });

        // üÜï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª–∫—É
        const addMembersBtn = document.querySelector('.add-members-btn');
        const modal = document.getElementById('add-members-modal');
        const confirmBtn = document.getElementById('confirm-add-members');
        const cancelBtn = document.getElementById('cancel-add-members');
        const membersInput = document.getElementById('members-input');

        addMembersBtn.addEventListener('click', () => {
            modal.style.display = 'flex';
            membersInput.value = '';
        });

        cancelBtn.addEventListener('click', () => {
            modal.style.display = 'none';
        });

        confirmBtn.addEventListener('click', async () => {
            const emails = membersInput.value
                .split(',')
                .map(email => email.trim())
                .filter(email => email.length > 0);

            if (emails.length === 0) {
                alert('–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ—á—Ç—É!');
                return;
            }

            try {
                const response = await fetch(`/api/team/${teamId}/add-members`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(emails)
                });

                if (!response.ok) {
                    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
                }
                modal.style.display = 'none';
                location.reload();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
            }
        });

    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–∞–Ω–¥—ã:", err);
    }
   // üÜï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: –ü–æ–∫–∏–Ω—É—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
    const moreOptionsBtn = document.querySelector('.more-options-btn');
    const moreOptionsMenu = document.querySelector('.more-options-menu');

    moreOptionsBtn.addEventListener('click', (e) => {

        moreOptionsMenu.style.display = moreOptionsMenu.style.display === 'none' ? 'block' : 'none';
    });

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
    document.addEventListener('click', (e) => {
        if (!moreOptionsBtn.contains(e.target) && !moreOptionsMenu.contains(e.target)) {
            moreOptionsMenu.style.display = 'none';
        }
    });

// –†–∞–±–æ—Ç–∞ —Å –º–æ–¥–∞–ª–∫–æ–π
    const modal = document.getElementById('more-options-modal');
    const confirmationMessage = modal.querySelector('.more-options-modal-message');
    const confirmBtn = modal.querySelector('.more-options-modal-btn.confirm');
    const cancelBtn = modal.querySelector('.more-options-modal-btn.cancel');

    function openModal(message, onConfirm) {
        confirmationMessage.textContent = message;
        modal.classList.remove('hidden');
        modal.classList.add('active');

        const confirmHandler = () => {
            closeModal();
            onConfirm();
        };

        confirmBtn.addEventListener('click', confirmHandler, { once: true });
        cancelBtn.addEventListener('click', closeModal, { once: true });

        function closeModal() {
            modal.classList.remove('active');
            modal.classList.add('hidden');
        }
    }

// –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥—É
    document.addEventListener('click', (e) => {
        if (e.target.closest('.option-leave')) {
            moreOptionsMenu.style.display = 'none';
            openModal('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥—É? –í—Å–µ —Å–≤—è–∑–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π –ø—Ä–æ–ø–∞–¥—É—Ç!', async () => {
                try {
                    const response = await fetch(`/api/team/${teamId}/leave`, {
                        method: 'POST'
                    });
                    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã');
                    window.location.href = '/teams';
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã:', error);
                    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥—É');
                }
            });
        }
    });

// –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
    document.addEventListener('click', (e) => {
        if (e.target.closest('.option-delete')) {
            moreOptionsMenu.style.display = 'none';
            openModal('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.', async () => {
                try {
                    const response = await fetch(`/api/team/${teamId}/delete`, {
                        method: 'DELETE'
                    });
                    if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
                    window.location.href = '/teams';
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
                    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É');
                }
            });
        }
    });

});

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏ –∏–º–µ–Ω–∏
function saveTeamDescription(teamId, teamName, description, emailsArray) {
    const payload = {
        team_name: teamName.trim(),
        description: description,
        emails: emailsArray.map(user => user.email)
    };

    fetch(`/api/editteam/${teamId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
    })
        .then(response => {
            if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
            console.log('–î–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
        });


}
